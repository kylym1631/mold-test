/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/add-housing.js":
/*!*************************************!*\
  !*** ./resources/js/add-housing.js ***!
  \*************************************/
/***/ (() => {

eval("\n\nvar roomData = {};\nvar housingGalleryFiles = [];\nvar toRemoveHousingGalleryFiles = [];\n$(function () {\n  $('#housing-form').submit(function () {\n    if (housingGalleryFiles.length > 25) {\n      toastr.error('Максимально 25 файлов');\n    }\n\n    var $submitBtn = $(this).find('button[type=\"submit\"]');\n    $submitBtn.prop('disabled', true).attr('data-kt-indicator', 'on');\n    var fD = new FormData(this);\n    housingGalleryFiles.forEach(function (file) {\n      if (file.type) {\n        fD.append('file[]', file, file.name);\n      }\n    });\n    toRemoveHousingGalleryFiles.forEach(function (fileName) {\n      fD.append('to_delete_files[]', fileName);\n    });\n    $.ajax({\n      url: $(this).attr('action'),\n      method: 'POST',\n      data: fD,\n      dataType: 'json',\n      contentType: false,\n      processData: false,\n      success: function success(response) {\n        if (response.error) {\n          toastr.error(response.error);\n          setTimeout(function () {\n            $submitBtn.prop('disabled', false).attr('data-kt-indicator', 'off');\n          }, 1000);\n        } else {\n          if (window.location.search && window.location.search.includes('id')) {\n            window.location.replace('/housing/view' + window.location.search);\n          } else {\n            window.location.replace('/housing');\n          }\n        }\n      }\n    });\n    return false;\n  });\n  $('#clients_add_select').select2({\n    placeholder: 'Поиск клиента',\n    ajax: {\n      url: \"/search/client\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  });\n  $('body').on('click', '.js-add-room', function () {\n    roomData = {\n      housing_id: $(this).attr('data-housing-id')\n    };\n    $('.js-room-popup .modal-title').text('Добавить комнату');\n    $('.js-room-popup [name=\"number\"]').val('');\n    $('.js-room-popup [name=\"places_count\"]').val('');\n    $('.js-room-popup [name=\"filled_count\"]').val(0).prop('readonly', true);\n    $('.js-room-popup').modal('show');\n  }).on('click', '.js-edit-room', function () {\n    roomData = {\n      id: $(this).attr('data-id'),\n      housing_id: $(this).attr('data-housing-id'),\n      number: $(this).attr('data-number'),\n      places_count: $(this).attr('data-places-count'),\n      filled_count: $(this).attr('data-filled-count')\n    };\n    $('.js-room-popup .modal-title').text('Редактировать комнату');\n    $('.js-room-popup [name=\"number\"]').val(roomData.number);\n    $('.js-room-popup [name=\"places_count\"]').val(roomData.places_count);\n    $('.js-room-popup [name=\"filled_count\"]').val(roomData.filled_count).prop('readonly', true);\n    $('.js-room-popup').modal('show');\n    return false;\n  }).on('click', '.js-room-popup .js-save-btn', function () {\n    var $mod = $(this).closest('.modal');\n    var $input = $mod.find('.js-input');\n    var err = 0;\n    $input.each(function () {\n      var $inp = $(this);\n\n      if ($inp.prop('required') && (!$inp.val() || $inp.val().length < 1)) {\n        toastr.error($('label[for=\"' + $inp.attr('id') + '\"]').text() + ' обязательное поле');\n        err++;\n      } else if ($inp.attr('name')) {\n        roomData[$inp.attr('name')] = $inp.val();\n      }\n    });\n\n    if (!err) {\n      sendRequest();\n    }\n  }).on('click', '#add-housing-contacts', function () {\n    var tplHtml = $('#contacts-template').html();\n    var $container = $('#husing-contacts-container');\n    $container.append(tplHtml);\n  }).on('click', '.js-delete-housing-contact', function () {\n    var $contact = $(this).closest('.housing-contact');\n    $contact.remove();\n  }).on('click', '.js-delete-room-btn', function () {\n    var id = $(this).attr('data-id');\n    Swal.fire({\n      html: 'Удалить комнату?',\n      icon: \"question\",\n      buttonsStyling: false,\n      showCancelButton: true,\n      confirmButtonText: \"Да!\",\n      cancelButtonText: 'Нет, отмена!',\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: 'btn btn-secondary'\n      }\n    }).then(function (r) {\n      if (r.isConfirmed) {\n        $.ajax({\n          url: '/housing/room/remove',\n          type: 'POST',\n          dataType: 'json',\n          data: {\n            id: id,\n            _token: $('input[name=_token]').val()\n          },\n          success: function success(res) {\n            if (res.error) {\n              toastr.error(res.error);\n            } else {\n              toastr.success('Успешно');\n            }\n\n            refreshTable();\n          }\n        });\n      }\n    });\n  });\n\n  if ($('#gallery').length) {\n    var dropzone = new Dropzone(\"#gallery\", {\n      autoProcessQueue: false,\n      url: '/',\n      maxFiles: 25,\n      maxFilesize: 5,\n      acceptedFiles: \".jpeg,.jpg,.png\",\n      addRemoveLinks: true,\n      accept: function accept(file, done) {\n        done();\n      }\n    }).on(\"addedfile\", function (file) {\n      housingGalleryFiles.push(file);\n      var filename = file.name.toLowerCase();\n      var ext = filename.split('.').pop();\n\n      if (ext == 'pdf') {\n        $('#gallery').find('img[data-dz-thumbnail]').attr('src', hostUrl + 'media/svg/files/pdf.svg').addClass('pdf');\n      }\n    }).on(\"removedfile\", function (file) {\n      var ind = null;\n      housingGalleryFiles.forEach(function (fItem, i) {\n        if (file.name == fItem.name) {\n          ind = i;\n        }\n      });\n\n      if (ind !== null) {\n        housingGalleryFiles.splice(ind, 1);\n      }\n\n      toRemoveHousingGalleryFiles.push(file.name);\n    });\n    var existFiles = existingHousingFiles || [];\n\n    if (existFiles.length) {\n      existFiles.forEach(function (file) {\n        dropzone.emit(\"addedfile\", file);\n        dropzone.emit(\"thumbnail\", file, file.path);\n        dropzone.emit(\"complete\", file);\n      });\n    }\n  }\n});\n\nfunction sendRequest() {\n  roomData._token = $('input[name=_token]').val();\n  $.ajax({\n    url: '/housing/room/add',\n    type: 'POST',\n    dataType: 'json',\n    data: roomData,\n    success: function success(res) {\n      if (res.error) {\n        toastr.error(res.error);\n      } else {\n        toastr.success('Успешно');\n        $('.js-room-popup').modal('hide');\n      }\n\n      refreshTable();\n    }\n  });\n}\n\nfunction refreshTable() {\n  if (window.dTables) {\n    dTables.forEach(function (tbl) {\n      tbl.draw();\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/add-housing.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/add-housing.js"]();
/******/ 	
/******/ })()
;