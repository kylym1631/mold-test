/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/add-candidate.js":
/*!***************************************!*\
  !*** ./resources/js/add-candidate.js ***!
  \***************************************/
/***/ (() => {

eval("\n\n$(function () {\n  var candidateFiles = [];\n  var ticketFile = null;\n  $('#candidate-form').submit(function () {\n    var $submitBtn = $(this).find('button[type=\"submit\"]');\n    $submitBtn.prop('disabled', true).attr('data-kt-indicator', 'on');\n    var fD = new FormData(this);\n    candidateFiles.forEach(function (item) {\n      fD.append('file[]', item[0], item[0].name);\n      fD.append('fileType[]', item[1]);\n    });\n\n    if (ticketFile) {\n      fD.append('ticket_file', ticketFile, ticketFile.name);\n    }\n\n    $.ajax({\n      url: $(this).attr('action'),\n      method: 'POST',\n      data: fD,\n      dataType: 'json',\n      contentType: false,\n      processData: false,\n      success: function success(response) {\n        if (response.error) {\n          toastr.error(response.error);\n          setTimeout(function () {\n            $submitBtn.prop('disabled', false).attr('data-kt-indicator', 'off');\n          }, 1000);\n        } else {\n          window.location.replace('/candidate/view?id=' + response.id);\n        }\n      }\n    });\n    return false;\n  });\n  $('#candidate-form-simple').submit(function () {\n    var $submitBtn = $(this).find('button[type=\"submit\"]');\n    $submitBtn.prop('disabled', true).attr('data-kt-indicator', 'on');\n    var fD = new FormData(this);\n    $.ajax({\n      url: $(this).attr('action'),\n      method: 'POST',\n      data: fD,\n      dataType: 'json',\n      contentType: false,\n      processData: false,\n      success: function success(response) {\n        if (response.error) {\n          toastr.error(response.error);\n          setTimeout(function () {\n            $submitBtn.prop('disabled', false).attr('data-kt-indicator', 'off');\n          }, 1000);\n        } else {\n          window.location.replace('/candidate/view?id=' + response.id);\n        }\n      }\n    });\n    return false;\n  });\n  $('#dateOfBirth').flatpickr({\n    dateFormat: 'd.m.Y',\n    locale: {\n      firstDayOfWeek: 1\n    }\n  }); // $('#date_arrive').flatpickr({\n  //     dateFormat: 'd.m.Y H:i',\n  //     enableTime: true,\n  //     minDate: \"today\",\n  //     time_24hr: true,\n  //     locale: {\n  //         firstDayOfWeek: 1\n  //     },\n  // });\n\n  $('#citizenship_id').select2({\n    placeholder: 'Поиск гражданства',\n    ajax: {\n      url: \"/search/candidate/citizenship\",\n      dataType: 'json',\n      // delay: 250,\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  });\n  $('#speciality_id').select2({\n    placeholder: 'Поиск специальности',\n    ajax: {\n      url: \"/search/speciality\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }); // $('#nacionality_id').select2({\n  //     placeholder: 'Поиск национальности',\n  //     ajax: {\n  //         url: \"/search/candidate/nacionality\",\n  //         dataType: 'json',\n  //         data: function (params) {\n  //             return {\n  //                 s: '',\n  //                 f_search: params.term,\n  //             };\n  //         },\n  //         processResults: function (data) {\n  //             var results = [];\n  //             $.each(data, function (index, item) {\n  //                 results.push({\n  //                     id: item.id,\n  //                     text: item.value\n  //                 });\n  //             });\n  //             return {\n  //                 results: results\n  //             };\n  //         }\n  //     },\n  // }).on('change.select2', function () {\n  //     $.ajax({\n  //         url: '/vacancy/check-nacionality',\n  //         type: 'GET',\n  //         data: 'vid=' + $('select#real_vacancy_id').val() + '&nacionality_id=' + $('#nacionality_id').val(),\n  //         success: function (res) {\n  //             if (res.is_disabled === true) {\n  //                 toastr.error('Национальность ' + $('#select2-nacionality_id-container').text() + ' не принимается на данной вакансии');\n  //                 $('#nacionality_id').html('');\n  //             }\n  //         }\n  //     });\n  // });\n\n  $('#country_id').select2({\n    placeholder: 'Поиск страны',\n    ajax: {\n      url: \"/search/candidate/country\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  });\n  $('#type_doc_id').select2({\n    placeholder: 'Поиск документа',\n    ajax: {\n      url: \"/search/candidate/typedocs\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  });\n  $('#real_vacancy_id').select2({\n    placeholder: 'Вакансия по факту',\n    ajax: {\n      url: \"/search/candidate/vacancy\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          gender: $('select[name=\"gender\"]').val(),\n          nacionality_id: $('select[name=\"nacionality_id\"]').val(),\n          view: 'candidate.add',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value,\n            disabled: item.filled || item.disabled\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }).on('select2:open', function (e) {\n    if (!$('select[name=\"gender\"]').val()) {\n      toastr.error('Укажите пол кандидата');\n    } // if ((group == 1 || group == 5) && !$('select[name=\"nacionality_id\"]').val()) {\n    //     toastr.error('Укажите национальность кандидата');\n    // }\n\n  });\n  $('body').on('click', '#select2-real_vacancy_id-results .select2-results__option--disabled', function () {\n    // toastr.error('Вакансия уже заполнена или недоступна национальность');\n    toastr.error('Вакансия уже заполнена');\n  });\n  $('body').on('change', 'select[name=\"gender\"]', function () {\n    $.ajax({\n      url: '/vacancy/check-filling',\n      type: 'GET',\n      data: 'vid=' + $('select#real_vacancy_id').val() + '&gender=' + $(this).val(),\n      success: function success(res) {\n        if (res.is_filled === true) {\n          if ($('select[name=\"gender\"]').val() == 'm') {\n            toastr.error('Эта ванасия не доступна для мужчин');\n          } else {\n            toastr.error('Эта ванасия не доступна для женщин');\n          }\n\n          $('select[name=\"gender\"]').prop('selectedIndex', 0);\n        }\n      }\n    });\n  });\n  $('#recruiter_id').select2({\n    placeholder: 'Рекрутер',\n    ajax: {\n      url: \"/search/candidate/recruter\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  });\n  $('#client_id:not([type=\"hidden\"])').select2({\n    placeholder: 'Клиент',\n    ajax: {\n      url: \"/search/candidate/client\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          f_search: params.term,\n          vacancy_id: $('#real_vacancy_id').val()\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }).on('select2:open', function (e) {\n    if (!$('#real_vacancy_id').val()) {\n      toastr.error('Выберите вакансию');\n    }\n  });\n  $('#client_position_id').select2({\n    placeholder: 'Должность',\n    ajax: {\n      url: \"/search/candidate/client/position\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          f_search: params.term,\n          client_id: $('#client_id').val()\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }).on('select2:open', function (e) {\n    if ($('#real_vacancy_id').length && !$('#real_vacancy_id').val()) {\n      toastr.error('Выберите вакансию');\n    }\n\n    if ($('#client_id').length && !$('#client_id').val()) {\n      toastr.error('Выберите клиента');\n    }\n  });\n  $('#real_status_work_id').select2({\n    placeholder: 'трудоустройство',\n    ajax: {\n      url: \"/search/candidate/realstatuswork\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  });\n  $('#place_arrive_id').select2({\n    placeholder: 'Поиск места прибытия',\n    ajax: {\n      url: \"/search/candidate/placearrive\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }); // $('#transport_id').select2({\n  //     placeholder: 'Тип транспорта',\n  //     ajax: {\n  //         url: \"/search/candidate/transport\",\n  //         dataType: 'json',\n  //         data: function (params) {\n  //             return {\n  //                 s: '',\n  //                 f_search: params.term,\n  //             };\n  //         },\n  //         processResults: function (data) {\n  //             var results = [];\n  //             $.each(data, function (index, item) {\n  //                 results.push({\n  //                     id: item.id,\n  //                     text: item.value\n  //                 });\n  //             });\n  //             return {\n  //                 results: results\n  //             };\n  //         }\n  //     },\n  // });\n\n  if ($('#kt_file_doc').length) {\n    var drZones = [['#kt_file_doc', 3], ['#kt_file_doc1', 103], ['#kt_file_doc2', 104], ['#kt_file_doc3', 105], ['#kt_file_doc4', 106], ['#kt_file_doc5', 107]];\n    drZones.forEach(function (item) {\n      var myDropzoneT = new Dropzone(item[0], {\n        autoProcessQueue: false,\n        url: '/',\n        maxFiles: 1,\n        dictInvalidFileType: 'Данный тип файла не допустим',\n        maxFilesize: 5,\n        acceptedFiles: \".jpeg,.jpg,.png,.gif,.pdf\",\n        addRemoveLinks: true,\n        accept: function accept(file, done) {\n          done();\n        }\n      });\n      myDropzoneT.on(\"addedfile\", function (file) {\n        candidateFiles.push([file, item[1]]);\n        var filename = file.name.toLowerCase();\n        var ext = filename.split('.').pop();\n\n        if (ext == 'pdf') {\n          $(item[0]).find('img[data-dz-thumbnail]').attr('src', hostUrl + 'media/svg/files/pdf.svg').addClass('pdf');\n        }\n      });\n      myDropzoneT.on(\"removedfile\", function (file) {\n        var ind = null;\n        candidateFiles.forEach(function (it, i) {\n          if (it[1] == item[1]) {\n            ind = i;\n          }\n        });\n        candidateFiles.splice(ind, 1);\n      });\n      myDropzoneT.options.dropzoneForm = {\n        dictFileTooBig: \"Максимальный размер файла 5 мб\",\n        dictMaxFilesExceeded: \"Не более одного файла\",\n        dictInvalidFileType: \"Данный тип файла не допустим\"\n      };\n    });\n  }\n\n  if ($('#kt_file_ticket').length) {\n    new Dropzone(\"#kt_file_ticket\", {\n      autoProcessQueue: false,\n      url: '/',\n      maxFiles: 1,\n      dictInvalidFileType: 'Данный тип файла не допустим',\n      maxFilesize: 5,\n      acceptedFiles: \".jpeg,.jpg,.png,.gif,.pdf\",\n      addRemoveLinks: true,\n      accept: function accept(file, done) {\n        done();\n      }\n    }).on(\"addedfile\", function (file) {\n      ticketFile = file;\n      var filename = file.name.toLowerCase();\n      var ext = filename.split('.').pop();\n\n      if (ext == 'pdf') {\n        $('#kt_file_ticket').find('img[data-dz-thumbnail]').attr('src', hostUrl + 'media/svg/files/pdf.svg').addClass('pdf');\n      }\n    }).on(\"removedfile\", function (file) {\n      ticketFile = null;\n    });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/add-candidate.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/add-candidate.js"]();
/******/ 	
/******/ })()
;