/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/status-manage.js":
/*!***************************************!*\
  !*** ./resources/js/status-manage.js ***!
  \***************************************/
/***/ (() => {

eval("\n\nvar statusData = {};\n$(function () {\n  $('body').on('change', '.js-select-status', function () {\n    statusData = {\n      _token: $('input[name=_token]').val(),\n      taskId: $(this).attr('data-task-id'),\n      candidateId: $(this).attr('data-candidate-id'),\n      leadId: $(this).attr('data-lead-id'),\n      action: $(this).attr('data-action'),\n      status: $(this).val()\n    };\n\n    if (statusData.action == 'setLeadStatus' && statusData.status == 4) {\n      var $mod = $('#status-manage-popup-lead-' + statusData.status);\n\n      if ($mod.length) {\n        $mod.modal('show');\n        $mod.find('.js-status-input').val('');\n        $mod.find('select.js-status-input').html('');\n        $mod.find('.js-status-details-other').hide();\n      }\n\n      return;\n    } else if (statusData.action == 'setCandidateStatus' && statusData.status == '3' && group == 5) {\n      Swal.fire({\n        html: 'Отправить в архив?',\n        icon: \"question\",\n        buttonsStyling: false,\n        showCancelButton: true,\n        confirmButtonText: \"Да!\",\n        cancelButtonText: 'Нет, отмена!',\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: 'btn btn-secondary'\n        }\n      }).then(function (r) {\n        if (r.isConfirmed) {\n          sendRequest();\n          return;\n        }\n\n        refreshTable();\n      });\n      return;\n    } else if (statusData.action == 'setCandidateStatus' && ['3', '5', '7', '9', '10', '11', '13', '14', '15', '16', '21', '22'].includes(statusData.status)) {\n      if (['9', '13', '14', '15', '16', '21', '22'].includes(statusData.status)) {\n        statusData.specialStatus = true;\n      }\n\n      var _$mod = $('#status-manage-popup-' + statusData.status);\n\n      if (_$mod.length) {\n        _$mod.modal('show');\n\n        _$mod.find('.js-status-input').val('');\n\n        _$mod.find('select.js-status-input').html('');\n      }\n\n      return;\n    } else if (statusData.action == 'setTaskStatus' && ['4'].includes(statusData.status)) {\n      var _$mod2 = $('#status-manage-popup-3');\n\n      if (_$mod2.length) {\n        _$mod2.modal('show');\n\n        _$mod2.find('.js-status-input').val('');\n      }\n\n      return;\n    }\n\n    sendRequest(); // Swal.fire({\n    //     html: 'Сменить статус на <b>' + ($(this).find('option[value=\"' + statusData.status + '\"]').text()) + '</b> ?',\n    //     icon: \"question\",\n    //     buttonsStyling: false,\n    //     showCancelButton: true,\n    //     confirmButtonText: \"Да!\",\n    //     cancelButtonText: 'Нет, отмена!',\n    //     customClass: {\n    //         confirmButton: \"btn btn-primary\",\n    //         cancelButton: 'btn btn-secondary'\n    //     }\n    // }).then((r) => {\n    //     if (r.isConfirmed) {\n    //         sendRequest();\n    //         return;\n    //     }\n    //     refreshTable();\n    // });\n  }).on('change', '.js-status-details-select', function () {\n    if ($(this).val() == 'other') {\n      $(this).closest('.js-status-details-wrap').find('.js-status-details-other').show().removeClass('js-hidden');\n    } else {\n      $(this).closest('.js-status-details-wrap').find('.js-status-details-other').hide().addClass('js-hidden');\n      $(this).closest('.js-status-details-wrap').find('.js-status-details-other .js-status-input').val('');\n    }\n  }).on('click', '.js-call-fail-btn', function () {\n    statusData = {\n      _token: $('input[name=_token]').val(),\n      taskId: $(this).attr('data-task-id'),\n      candidateId: $(this).attr('data-candidate-id'),\n      leadId: $(this).attr('data-lead-id'),\n      action: $(this).attr('data-action'),\n      status: $(this).attr('data-status'),\n      specialStatus: true\n    };\n    var $mod = $('#status-manage-popup-15');\n\n    if ($mod.length) {\n      $mod.modal('show');\n    }\n\n    return false;\n  }).on('click', '.js-not-liquidity-btn', function () {\n    statusData = {\n      _token: $('input[name=_token]').val(),\n      taskId: $(this).attr('data-task-id'),\n      candidateId: $(this).attr('data-candidate-id'),\n      leadId: $(this).attr('data-lead-id'),\n      action: $(this).attr('data-action'),\n      status: $(this).attr('data-status')\n    };\n    var $mod = $('#status-manage-popup-lead-' + statusData.status);\n\n    if ($mod.length) {\n      $mod.modal('show');\n      $mod.find('.js-status-input').val('');\n      $mod.find('.js-status-details-other').hide();\n    }\n\n    return false;\n  }).on('click', '.js-status-save-btn', function () {\n    var $mod = $(this).closest('.modal');\n    var $input = $mod.find('.js-status-input');\n    var err = 0;\n    $input.each(function () {\n      var $inp = $(this);\n\n      if ($('.js-own-housing-checkbox').prop('checked')) {\n        statusData['own_housing'] = 1;\n\n        if ($inp.attr('name') == 'housing_id' || $inp.attr('name') == 'housing_room_id' || $inp.attr('name') == 'residence_started_at') {\n          return;\n        }\n      }\n\n      if ($inp.prop('required') && (!$inp.val() || $inp.val().length < 1) && !$inp.closest('.js-hidden').length) {\n        toastr.error($('label[for=\"' + $inp.attr('id') + '\"]').text() + ' обязательное поле');\n        err++;\n      } else if (!$inp.closest('.js-hidden').length) {\n        if ($inp.attr('name') == 'details' && $inp.val() != 'other') {\n          statusData.comment = $inp.val();\n        } else {\n          statusData[$inp.attr('name')] = $inp.val();\n        }\n      }\n    });\n\n    if (!err) {\n      sendRequest();\n      $mod.modal('hide');\n    }\n  }).on('click', '.js-status-cancel-btn, .modal .btn-icon[aria-label=\"Close\"]', function () {\n    refreshTable();\n  }).on('click', '.modal', function (e) {\n    if (!$(e.target).closest('.modal-content').length) {\n      refreshTable();\n    }\n  }).on('click', '.js-create-candidate-from-lead', function () {\n    statusData = {\n      _token: $('input[name=_token]').val(),\n      taskId: $(this).attr('data-task-id'),\n      leadId: $(this).attr('data-lead-id'),\n      action: 'createCandidateFromLead',\n      afterAction: 'goToCandidateEditPage'\n    };\n    Swal.fire({\n      html: 'Создать карточку кандидата?',\n      icon: \"question\",\n      buttonsStyling: false,\n      showCancelButton: true,\n      confirmButtonText: \"Да!\",\n      cancelButtonText: 'Нет, отмена!',\n      customClass: {\n        confirmButton: \"btn btn-primary\",\n        cancelButton: 'btn btn-secondary'\n      }\n    }).then(function (r) {\n      if (r.isConfirmed) {\n        sendRequest();\n        return;\n      }\n\n      refreshTable();\n    });\n  });\n  $('#status-manage-input-9, .js-date-input').flatpickr({\n    dateFormat: 'd.m.Y',\n    locale: {\n      firstDayOfWeek: 1\n    }\n  });\n  $('.js-status-input-callback').flatpickr({\n    dateFormat: 'd.m.Y H:i',\n    enableTime: true,\n    minDate: 'today',\n    time_24hr: true,\n    locale: {\n      firstDayOfWeek: 1\n    },\n    onChange: function onChange(selectedDates) {\n      var d = new Date(selectedDates);\n      var hour = d.getHours();\n      var day = d.getDay();\n      var $saveBtn = $(this.input).closest('.modal').find('.js-status-save-btn');\n      var err = 0;\n\n      if (hour < 7 || hour > 19) {\n        toastr.error('только в рабочее время с 7 до 19');\n        err++;\n      }\n\n      if (day === 0) {\n        toastr.error('только Пн-Сб');\n        err++;\n      }\n\n      if (err) {\n        $saveBtn.prop('disabled', true);\n      } else {\n        $saveBtn.prop('disabled', false);\n      }\n    },\n    onDayCreate: function onDayCreate(dObj, dStr, fp, dayElem) {\n      var d = new Date(dayElem.dateObj);\n      var day = d.getDay();\n\n      if (day === 0) {\n        dayElem.classList.add('flatpickr-disabled');\n      }\n    }\n  });\n  $('#status-manage-input-16').flatpickr({\n    dateFormat: 'd.m.Y H:i',\n    enableTime: true,\n    minDate: 'today',\n    time_24hr: true,\n    locale: {\n      firstDayOfWeek: 1\n    }\n  });\n  $('.js-housing-id').select2({\n    placeholder: 'Поиск жилья',\n    ajax: {\n      url: \"/search/housing\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }).on('select2:open', function (e) {\n    $('select.js-housing-room-id').html('');\n  });\n  $('.js-doc-type-id').select2({\n    placeholder: 'Тип документа',\n    minimumResultsForSearch: -1,\n    ajax: {\n      url: \"/search/candidate/typedocs\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }).on('select2:open', function (e) {});\n  $('.js-housing-room-id').select2({\n    placeholder: 'Поиск комнаты',\n    ajax: {\n      url: \"/search/housing_room\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: $('.js-housing-id').val(),\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }).on('select2:open', function (e) {\n    if (!$('.js-housing-id').val()) {\n      toastr.error('Выберите жилье');\n    }\n  });\n  $('.js-client-position-id-select').select2({\n    placeholder: 'Должность',\n    ajax: {\n      url: \"/search/candidate/client/position\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          candidate_id: statusData.candidateId\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  });\n  $('body').on('change', '.js-own-housing-checkbox', function () {\n    if ($(this).prop('checked')) {\n      $('.js-housing-container').hide();\n    } else {\n      $('.js-housing-container').show();\n    }\n  });\n\n  if ($('.js-status-dropzone').length) {\n    new Dropzone(\".js-status-dropzone\", {\n      autoProcessQueue: false,\n      url: '/',\n      maxFiles: 1,\n      dictInvalidFileType: 'Данный тип файла не допустим',\n      maxFilesize: 1,\n      acceptedFiles: \".jpeg,.jpg,.png,.gif,.pdf\",\n      addRemoveLinks: true,\n      accept: function accept(file, done) {\n        done();\n      }\n    }).on(\"addedfile\", function (file) {\n      statusData.file = file;\n      var filename = file.name.toLowerCase();\n      var ext = filename.split('.').pop();\n\n      if (ext == 'pdf') {\n        $('.js-status-dropzone').find('img[data-dz-thumbnail]').attr('src', hostUrl + 'media/svg/files/pdf.svg').addClass('pdf');\n      }\n    }).on(\"removedfile\", function (file) {\n      statusData.file = null;\n    });\n  }\n});\n\nfunction sendRequest() {\n  var fD = new FormData();\n\n  for (var key in statusData) {\n    if (Object.hasOwnProperty.call(statusData, key)) {\n      var val = statusData[key];\n\n      if (val) {\n        if (key == 'file') {\n          fD.append('file[]', val, val.name);\n        } else {\n          fD.append(key, val);\n        }\n      }\n    }\n  }\n\n  $.ajax({\n    url: '/status-manage',\n    type: 'POST',\n    data: fD,\n    dataType: 'json',\n    contentType: false,\n    processData: false,\n    success: function success(res) {\n      if (res.error) {\n        if (res.errCode == 'ADD_ARRIVAL') {\n          if (window.addArrival) {\n            addArrival(res.candidateId);\n          }\n        }\n\n        toastr.error(res.error);\n      } else {\n        toastr.success('Успешно');\n      }\n\n      refreshTable();\n\n      if (res.goTo) {\n        window.location.href = res.goTo;\n      }\n    }\n  });\n}\n\nfunction refreshTable() {\n  if (window.tasksOTable) {\n    tasksOTable.draw();\n  }\n\n  if (window.candidatesOTable) {\n    candidatesOTable.draw();\n  }\n\n  if (window.arrivalsTable) {\n    arrivalsTable.draw();\n  }\n\n  if (window.dTables) {\n    dTables.forEach(function (tbl) {\n      tbl.draw();\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/status-manage.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/status-manage.js"]();
/******/ 	
/******/ })()
;