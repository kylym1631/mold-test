/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/arrivals-manage.js":
/*!*****************************************!*\
  !*** ./resources/js/arrivals-manage.js ***!
  \*****************************************/
/***/ (() => {

eval("\n\nvar arrivalsData = {};\n$(function () {\n  $('body').on('click', '.js-add-arrival', function () {\n    arrivalsData = {\n      candidate_id: $(this).attr('data-candidate-id')\n    };\n    $('#arrivals-add-popup .modal-title').text('Добавить приезд');\n    $('#arrivals-add-popup [name=\"place_arrive_id\"]').html('');\n    $('#arrivals-add-popup [name=\"transport_id\"]').html('');\n    $('#arrivals-add-popup [name=\"date_arrive\"]').val('');\n    $('#arrivals-add-popup [name=\"comment\"]').val('');\n    $('#arrivals-add-popup [name=\"transportation_id\"]').html('');\n    $('#arrivals-add-popup .js-transportations-field').hide();\n    addArrival();\n  }).on('click', '.js-edit-arrival', function () {\n    arrivalsData = {\n      id: $(this).attr('data-id'),\n      place_arrive_id: $(this).attr('data-place_arrive_id'),\n      transport_id: $(this).attr('data-transport_id'),\n      date_arrive: $(this).attr('data-date_arrive'),\n      comment: $(this).attr('data-comment'),\n      transportation_id: $(this).attr('data-transportation-id')\n    };\n    $('#arrivals-add-popup .modal-title').text('Редактировать приезд');\n    $('#arrivals-add-popup [name=\"place_arrive_id\"]').html('<option value=\"' + arrivalsData.place_arrive_id + '\" selected>' + $(this).attr('data-place_arrive_name') + '</option>');\n    $('#arrivals-add-popup [name=\"transport_id\"]').html('<option value=\"' + arrivalsData.transport_id + '\" selected>' + $(this).attr('data-transport_name') + '</option>');\n\n    if (arrivalsData.transportation_id) {\n      $('.js-transportations-field').show();\n      $('#arrivals-add-popup [name=\"transportation_id\"]').html('<option value=\"' + arrivalsData.transportation_id + '\" selected>' + $(this).attr('data-transportation') + '</option>');\n    }\n\n    $('#arrivals-add-popup [name=\"date_arrive\"]').val(arrivalsData.date_arrive);\n    $('#arrivals-add-popup [name=\"comment\"]').val(arrivalsData.comment);\n    $('#arrivals-add-popup').modal('show');\n    return false;\n  }).on('click', '#arrivals-add-popup .js-save-btn', function () {\n    var $mod = $(this).closest('.modal');\n    var $input = $mod.find('.js-input');\n    var err = 0;\n    $input.each(function () {\n      var $inp = $(this);\n\n      if ($inp.prop('required') && !elemIsHidden($inp[0]) && (!$inp.val() || $inp.val().length < 1)) {\n        toastr.error($('label[for=\"' + $inp.attr('id') + '\"]').text() + ' обязательное поле');\n        err++;\n      } else if ($inp.attr('name')) {\n        arrivalsData[$inp.attr('name')] = $inp.val();\n      }\n    });\n\n    if (!err) {\n      sendRequest();\n      $mod.modal('hide');\n    }\n  }).on('click', '#arrivals-add-popup .js-status-cancel-btn', function () {\n    refreshTable();\n  });\n  $('.js-place-arrive-id').select2({\n    placeholder: 'Поиск места прибытия',\n    ajax: {\n      url: \"/search/candidate/placearrive\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  });\n  $('.js-transportions-id').select2({\n    placeholder: 'Поиск регулярных перевозок',\n    ajax: {\n      url: \"/search/transportations\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }).on('change', function () {\n    var val = $(this).val();\n    $.get('/transportation/json/' + val, function (item) {\n      $('input[name=\"date_arrive\"]').val(item.arrival_date_format).prop('readonly', true).removeClass('js-date-arrive flatpickr-input').css('pointer-events', 'none');\n      $('select[name=\"place_arrive_id\"]').append(new Option(item.arrival_place.name, item.arrival_place.id, true, true)).trigger('change').next('span').css('pointer-events', 'none');\n    });\n  });\n  $('.js-transport-id').select2({\n    placeholder: 'Тип транспорта',\n    ajax: {\n      url: \"/search/candidate/transport\",\n      dataType: 'json',\n      data: function data(params) {\n        return {\n          s: '',\n          f_search: params.term\n        };\n      },\n      processResults: function processResults(data) {\n        var results = [];\n        $.each(data, function (index, item) {\n          results.push({\n            id: item.id,\n            text: item.value\n          });\n        });\n        return {\n          results: results\n        };\n      }\n    }\n  }).on('change', function () {\n    var val = $(this).val();\n    console.log(val);\n\n    if (val == 999999) {\n      $('.js-transportations-field').show().addClass('active');\n      $('input[name=\"date_arrive\"]').prop('readonly', true).removeClass('js-date-arrive flatpickr-input').css('pointer-events', 'none');\n      $('select[name=\"place_arrive_id\"]').next('span').css('pointer-events', 'none');\n    } else if ($('.js-transportations-field').hasClass('active')) {\n      $('.js-transportations-field').hide().removeClass('active');\n      $('.js-transportions-id').html('');\n      $('input[name=\"date_arrive\"]').val('').addClass('js-date-arrive flatpickr-input').css('pointer-events', 'all');\n      $('select[name=\"place_arrive_id\"]').html('').next('span').css('pointer-events', 'all');\n    }\n  });\n  $('.js-date-arrive').flatpickr({\n    dateFormat: 'd.m.Y H:i',\n    enableTime: true,\n    minDate: \"today\",\n    time_24hr: true,\n    locale: {\n      firstDayOfWeek: 1\n    }\n  });\n});\n\nwindow.addArrival = function addArrival(candidateId) {\n  arrivalsData._token = $('input[name=_token]').val();\n\n  if (candidateId) {\n    arrivalsData.candidate_id = candidateId;\n  }\n\n  $.ajax({\n    url: '/candidates/arrivals/count',\n    type: 'GET',\n    dataType: 'json',\n    data: arrivalsData,\n    success: function success(res) {\n      if (res.error) {\n        toastr.error(res.error);\n      } else {\n        if (res.count >= 4) {\n          Swal.fire({\n            html: 'Кандидат сделал уже ' + (res.count - 1) + ' перепланировки!<br> Отправить кандидата в архив?',\n            icon: \"question\",\n            buttonsStyling: false,\n            showCancelButton: true,\n            confirmButtonText: \"Да!\",\n            cancelButtonText: 'Нет, отмена!',\n            customClass: {\n              confirmButton: \"btn btn-primary\",\n              cancelButton: 'btn btn-secondary'\n            }\n          }).then(function (r) {\n            if (r.isConfirmed) {\n              arrivalsData.action = 'setCandidateStatus';\n              arrivalsData.candidateId = arrivalsData.candidate_id;\n              arrivalsData.status = 5;\n              arrivalsData.comment = 'Кандидат сделал уже ' + (res.count - 1) + ' перепланировки';\n              $.ajax({\n                url: '/status-manage',\n                type: 'POST',\n                dataType: 'json',\n                data: arrivalsData,\n                success: function success(res) {\n                  if (res.error) {\n                    toastr.error(res.error);\n                  } else {\n                    toastr.success('Успешно');\n                  }\n\n                  refreshTable();\n                }\n              });\n            } else {\n              $('#arrivals-add-popup').modal('show');\n            }\n          });\n        } else {\n          $('#arrivals-add-popup').modal('show');\n        }\n      }\n    }\n  });\n};\n\nfunction sendRequest() {\n  arrivalsData._token = $('input[name=_token]').val();\n  $.ajax({\n    url: '/candidates/arrivals/add',\n    type: 'POST',\n    dataType: 'json',\n    data: arrivalsData,\n    success: function success(res) {\n      if (res.error) {\n        toastr.error(res.error);\n      } else {\n        toastr.success('Успешно');\n      }\n\n      refreshTable();\n    }\n  });\n}\n\nfunction refreshTable() {\n  if (window.arrivalsTable) {\n    arrivalsTable.draw();\n  }\n\n  if (window.tasksOTable) {\n    tasksOTable.draw();\n  }\n\n  if (window.dTables) {\n    dTables.forEach(function (tbl) {\n      tbl.draw();\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/arrivals-manage.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/arrivals-manage.js"]();
/******/ 	
/******/ })()
;